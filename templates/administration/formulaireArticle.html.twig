    <div class="justify-content-center" align="center">
        {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
        
        {# Les erreurs générales du formulaire #}
        {{ form_errors(form) }}

        {# Génération manuelle du formulaire #}
        {# Titre de l'article #}
        <div class="w-4/5 lg:w-full" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.titreArticle, "Titre de l'article :", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.titreArticle) }}
            <div class="">
                {# Génération de l'input. #}
                {{ form_widget(form.titreArticle, {'attr': {'class': 'border py-2 px-4 rounded-lg shadow-lg w-4/5 lg:w-full', 'placeholder': 'Dupont...'}}) }}
            </div>
        </div>
        {# Image de couverture de l'article #}
        <div class="w-4/5 lg:w-full" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.image, "Image de couverture :", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.image) }}
            <div class="">
                {# Génération de l'input. #}
                {{ form_widget(form.image, {'attr': {'class': 'border py-2 px-4 rounded-lg shadow-lg w-4/5 lg:w-full', 'placeholder': 'Image...'}}) }}
            </div>
        </div>
        {# Résumé de l'article #}
        <div class="w-4/5 lg:w-full" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.resumeArticle, "Résumé de l'article :", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.resumeArticle) }}
            <div class="">
                {# Génération de l'input. #}
                {{ form_widget(form.resumeArticle, {'attr': {'class': 'border py-2 px-4 rounded-lg shadow-lg w-4/5 lg:w-full', 'placeholder': 'Cet article parle de...'}}) }}
            </div>
        </div>
        {# Contenu de l'article #}
        <div class="w-4/5 lg:w-full" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.contenuArticle, "Contenu de l'article :", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.contenuArticle) }}
            <div class="w-4/5 lg:w-full">
                {# Génération de l'input. #}
                {{ form_widget(form.contenuArticle, {'attr': {'class': 'border py-2 px-4 rounded-lg shadow-lg w-4/5 lg:w-full', 'placeholder': 'Lorem Ipsum...'}}) }}
            </div>
        </div>
        <p style="margin-top: 1rem;">
        {# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}
        {{ form_widget(form.ajouter, {'attr': {'class': 'bg-green-500 hover:bg-green-400 text-white font-bold py-2 px-7 border-b-4 border-green-700 hover:border-green-500 rounded'}}) }}
        {# Fermeture de la balise <form> de formulaire HTML #}
        {{ form_end(form) }}
    </div>
<script>
        tinymce.init({
        selector: '#article_contenuArticle',
        plugins: 'advlist link image lists',
        toolbar: 'undo redo | styleselect | bold italic underline | alignleft aligncenter alignright alignjustify | indentation | link image',
        automatic_uploads: true,
        images_upload_url: '{{ path('uploadImage') }}',
        file_picker_types: 'image',
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            /*
            Note: In modern browsers input[type="file"] is functional without
            even adding it to the DOM, but that might not be the case in some older
            or quirky browsers like IE, so you might want to add it to the DOM
            just in case, and visually hide it. And do not forget do remove it
            once you do not need it anymore.
            */

            input.onchange = function () {
            var file = this.files[0];

            var reader = new FileReader();
            reader.onload = function () {
                /*
                Note: Now we need to register the blob in TinyMCEs image blob
                registry. In the next release this part hopefully won't be
                necessary, as we are looking to handle it internally.
                */
                var id = 'blobid' + (new Date()).getTime();
                var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
                var base64 = reader.result.split(',')[1];
                var blobInfo = blobCache.create(id, file, base64);
                blobCache.add(blobInfo);

                /* call the callback and populate the Title field with the file name */
                cb(blobInfo.blobUri(), { title: file.name });
            };
            reader.readAsDataURL(file);
            };

            input.click();
        },
        });
</script>