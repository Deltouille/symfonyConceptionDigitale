    <div class="justify-content-center" align="center">
        {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
        
        {# Les erreurs générales du formulaire #}
        {{ form_errors(form) }}

        {# Génération manuelle du formulaire #}
        {# Nom de l'article #}
        <div class="form-group mx-16 sm:mx-16 md:mx-16 lg:mx-16 xl:mx-40 2xl:mx-60">
            {# Génération du label #}
            {{ form_label(form.titreArticle, "Nom d'article", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.titreArticle) }}
            <div class="col-sm-10">
                {# Génération de l'input. #}
                {{ form_widget(form.titreArticle, {'attr': {'class': 'form-control'}}) }}
            </div>
        </div>
        {# Image de couverture de l'article #}
        <div class="form-group mx-16 sm:mx-16 md:mx-16 lg:mx-16 xl:mx-40 2xl:mx-60" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.image, "Image de couverture de l'article", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.image) }}
            <div class="col-sm-10">
                {# Génération de l'input. #}
                {{ form_widget(form.image, {'attr': {'class': 'form-control'}}) }}
            </div>
        </div>
        {# Résumé de l'article #}
        <div class="form-group mx-16 sm:mx-16 md:mx-16 lg:mx-16 xl:mx-40 2xl:mx-60" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.resumeArticle, "Résumé de l'article", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.resumeArticle) }}
            <div class="col-sm-10">
                {# Génération de l'input. #}
                {{ form_widget(form.resumeArticle, {'attr': {'class': 'form-control'}}) }}
            </div>
        </div>
        {# Contenu de l'article #}
         <div class="form-group mx-16 sm:mx-16 md:mx-16 lg:mx-16 xl:mx-40 2xl:mx-60" style="margin-top: 2rem;">
            {# Génération du label #}
            {{ form_label(form.contenuArticle, "Contenu de l'article", {'label_attr': {'class': 'cal-sm-2 control-label'}}) }}
            {# Affichage des erreurs pour ce champ précis #}
            {{ form_errors(form.contenuArticle) }}
            <div class="col-sm-10" id="inputContenuArticle">
                {# Génération de l'input. #}
                {{ form_widget(form.contenuArticle, {'attr': {'class': 'form-control '}}) }}
            </div>
        </div>       

        <p class="d-flex justify-content-center" style="margin-top: 1rem;">

        {# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}
        {{ form_widget(form.ajouter, {'attr': {'class': 'px-4 py-2 rounded-md text-sm font-medium border-b-2 focus:outline-none focus:ring transition text-white bg-green-500 border-green-800 hover:bg-green-600 active:bg-green-700 focus:ring-green-300'}}) }}
        {# Fermeture de la balise <form> de formulaire HTML #}
        {{ form_end(form) }}
    </div>
<script>
        tinymce.init({
        selector: '#article_contenuArticle',
        plugins: 'advlist link image lists',
        toolbar: 'undo redo | styleselect | bold italic underline | alignleft aligncenter alignright alignjustify | indentation | link image',
        automatic_uploads: true,
        images_upload_url: '{{ path('uploadImage') }}',
        file_picker_types: 'image',
        file_picker_callback: function (cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            /*
            Note: In modern browsers input[type="file"] is functional without
            even adding it to the DOM, but that might not be the case in some older
            or quirky browsers like IE, so you might want to add it to the DOM
            just in case, and visually hide it. And do not forget do remove it
            once you do not need it anymore.
            */

            input.onchange = function () {
            var file = this.files[0];

            var reader = new FileReader();
            reader.onload = function () {
                /*
                Note: Now we need to register the blob in TinyMCEs image blob
                registry. In the next release this part hopefully won't be
                necessary, as we are looking to handle it internally.
                */
                var id = 'blobid' + (new Date()).getTime();
                var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
                var base64 = reader.result.split(',')[1];
                var blobInfo = blobCache.create(id, file, base64);
                blobCache.add(blobInfo);

                /* call the callback and populate the Title field with the file name */
                cb(blobInfo.blobUri(), { title: file.name });
            };
            reader.readAsDataURL(file);
            };

            input.click();
        },
        });
</script>

